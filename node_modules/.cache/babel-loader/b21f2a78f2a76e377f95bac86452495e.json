{"ast":null,"code":"import _toConsumableArray from \"/home/armish/University/Semester-8/FYP-2/Delance-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/armish/University/Semester-8/FYP-2/Delance-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/home/armish/University/Semester-8/FYP-2/Delance-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/armish/University/Semester-8/FYP-2/Delance-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/armish/University/Semester-8/FYP-2/Delance-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/armish/University/Semester-8/FYP-2/Delance-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/armish/University/Semester-8/FYP-2/Delance-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/armish/University/Semester-8/FYP-2/Delance-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/armish/University/Semester-8/FYP-2/Delance-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/armish/University/Semester-8/FYP-2/Delance-app/src/Components/MyProjects/BidBlockchain.jsx\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport React, { Component, useContext } from \"react\";\nimport Web3 from \"web3\";\nimport \"./myProjects.css\";\nimport swal from \"sweetalert\";\nimport { DELANCE_CONTRACT_ADDRESS, DELANCE_ABI } from \"../abi\";\n// import MyProjects from \"./MyProjects\";\nimport MyProjects from \"./MyProjects\";\n// eslint-disable-next-line no-unused-vars\nimport { ethers } from \"ethers\";\nimport { Context } from \"../../Context\";\nvar BidBlockchain = /*#__PURE__*/function (_Component) {\n  _inherits(BidBlockchain, _Component);\n  _createClass(BidBlockchain, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.initConnection();\n              case 2:\n                _context.next = 4;\n                return this.deployContract();\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n      return componentWillMount;\n    }()\n  }]);\n  function BidBlockchain(props) {\n    var _this;\n    _classCallCheck(this, BidBlockchain);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BidBlockchain).call(this, props));\n    _this.initConnection = function () {\n      // connenting with metamask!\n      var provider = window.ethereum;\n      // console.log('eht: ', window.ethereum);\n\n      var selectedAccount;\n      if (typeof provider !== \"undefined\") {\n        provider.request({\n          method: \"eth_requestAccounts\"\n        }).then(function (accounts) {\n          selectedAccount = accounts[0];\n          _this.setState({\n            account: selectedAccount\n          });\n          // setting account in local storage.\n          var _useContext = useContext(Context),\n            userState = _useContext.userState,\n            setUserState = _useContext.setUserState;\n          setUserState(_objectSpread({}, userState, {\n            metaAccount: selectedAccount\n          }));\n\n          // localStorage.setItem(\"ownerAddress\", this.state.account);\n          console.log(\"Selected account is: \".concat(selectedAccount));\n        }).catch(function (err) {\n          console.log(err);\n        });\n        window.ethereum.on(\"accountsChanged\", function (accounts) {\n          localStorage.removeItem(\"ownerAddress\");\n          selectedAccount = accounts[0];\n          // updating new account in local storage.\n          localStorage.setItem(\"ownerAddress\", this.state.account);\n          this.setState({\n            account: selectedAccount\n          });\n          console.log(\"Account changed to: \".concat(selectedAccount));\n        });\n      }\n    };\n    _this.deployContract = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var provider, web3, networkId, delanceContract, currentJobCount, _projectsCount, i, _project;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              provider = window.ethereum;\n              web3 = new Web3(provider);\n              _context2.next = 4;\n              return web3.eth.net.getId();\n            case 4:\n              networkId = _context2.sent;\n              console.log(\"Network id is: \".concat(networkId));\n\n              // actual fetching plus posting data on the blockchian!!!\n              if (!DELANCE_CONTRACT_ADDRESS) {\n                _context2.next = 30;\n                break;\n              }\n              delanceContract = new web3.eth.Contract(DELANCE_ABI, DELANCE_CONTRACT_ADDRESS); // setContract(delanceContract);\n              _this.setState({\n                delanceSmContaract: delanceContract\n              });\n              _context2.next = 11;\n              return delanceContract.methods.productCount().call();\n            case 11:\n              currentJobCount = _context2.sent;\n              console.log(\"current job count: \".concat(currentJobCount));\n              _context2.next = 15;\n              return delanceContract.methods.productCount().call();\n            case 15:\n              _projectsCount = _context2.sent;\n              _this.setState({\n                projectsCount: _projectsCount\n              });\n              i = 1;\n            case 18:\n              if (!(i <= _projectsCount)) {\n                _context2.next = 27;\n                break;\n              }\n              _context2.next = 21;\n              return delanceContract.methods.products(i).call();\n            case 21:\n              _project = _context2.sent;\n              _project = Object.values(_project);\n              _this.setState({\n                projects: [].concat(_toConsumableArray(_this.state.projects), [_project])\n              });\n            case 24:\n              i++;\n              _context2.next = 18;\n              break;\n            case 27:\n              console.log(_this.state.projects);\n              _context2.next = 31;\n              break;\n            case 30:\n              swal({\n                title: \"Smart contract not deployed\",\n                text: \"Smart contract not deployed to the current detected network: \".concat(networkId, \"!\"),\n                icon: \"fail\"\n              });\n            case 31:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    _this.addJob = function (_projectTitle, _price) {\n      console.log(\"Hello from addJob: \", _this.state.account);\n      _this.state.delanceSmContaract.methods.createProduct(_projectTitle, _price).send({\n        from: _this.state.account\n      }).once(\"receipt\", function (receipt) {\n        swal({\n          title: \"Congratulations!\",\n          text: \"\".concat(_projectTitle, \" bid has been closed.\"),\n          icon: \"success\"\n        });\n      });\n      console.log(\"sender account: \".concat(_this.state.account, \".. JOB ADDED!\"));\n\n      // sweet alert!\n    };\n    _this.completeJob = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(receiverAddr, senderAddr, _amount) {\n        var provider, decimals, input, amount, signer, tx;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // console.log('Hello from addJob: ', this.state.account);\n                provider = new ethers.providers.Web3Provider(window.ethereum);\n                decimals = 18;\n                input = _amount;\n                if (_amount >= 1) {\n                  amount = ethers.BigNumber.from(input).mul(ethers.BigNumber.from(10).pow(decimals));\n                } else {\n                  amount = ethers.utils.parseUnits(_amount.toString(), \"ether\");\n                }\n                signer = provider.getSigner();\n                _context3.next = 7;\n                return signer.sendTransaction({\n                  to: receiverAddr,\n                  value: amount\n                });\n              case 7:\n                tx = _context3.sent;\n                console.log(\"tx: \", tx);\n\n                // { ----------------------------------------------------------} Attempt-2\n                // let ethereum = window.ethereum;\n                // Request account access if needed\n                // await ethereum.enable();\n\n                // let provider = new ethers.providers.Web3Provider(ethereum);\n                // const amount = ethers.BigNumber.from(_amount).mul(\n                //   ethers.BigNumber.from(10).pow(decimals)\n                // );\n\n                // // Acccounts now exposed\n                // const params = [\n                //   {\n                //     from: senderAddr,\n                //     to: receiverAddr,\n                //     value: toString(_amount),\n                //   },\n                // ];\n\n                // const signer = provider.getSigner();\n                // const tx = signer.sendUncheckedTransaction(params);\n                // console.log(tx);\n\n                // const transactionHash = await provider.send('eth_sendTransaction', params)\n                // console.log('transactionHash is ' + transactionHash);\n\n                // console.log(`sender account: ${this.state.account}.. JOB ADDED!`);\n\n                // sweet alert!\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      return function (_x, _x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    _this.state = {\n      account: \"\",\n      projectsCount: 0,\n      projects: [],\n      delanceSmContaract: \"\"\n    };\n    _this.addJob = _this.addJob.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  _createClass(BidBlockchain, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(MyProjects, {\n        addJob: this.addJob,\n        completeJob: this.completeJob,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n  return BidBlockchain;\n}(Component);\nexport default BidBlockchain;","map":{"version":3,"names":["React","Component","useContext","Web3","swal","DELANCE_CONTRACT_ADDRESS","DELANCE_ABI","MyProjects","ethers","Context","BidBlockchain","initConnection","deployContract","props","provider","window","ethereum","selectedAccount","request","method","then","accounts","setState","account","userState","setUserState","metaAccount","console","log","catch","err","on","localStorage","removeItem","setItem","state","web3","eth","net","getId","networkId","delanceContract","Contract","delanceSmContaract","methods","productCount","call","currentJobCount","_projectsCount","projectsCount","i","products","_project","Object","values","projects","title","text","icon","addJob","_projectTitle","_price","createProduct","send","from","once","receipt","completeJob","receiverAddr","senderAddr","_amount","providers","Web3Provider","decimals","input","amount","BigNumber","mul","pow","utils","parseUnits","toString","signer","getSigner","sendTransaction","to","value","tx","bind"],"sources":["/home/armish/University/Semester-8/FYP-2/Delance-app/src/Components/MyProjects/BidBlockchain.jsx"],"sourcesContent":["import React, { Component, useContext } from \"react\";\nimport Web3 from \"web3\";\nimport \"./myProjects.css\";\nimport swal from \"sweetalert\";\nimport { DELANCE_CONTRACT_ADDRESS, DELANCE_ABI } from \"../abi\";\n// import MyProjects from \"./MyProjects\";\nimport MyProjects from \"./MyProjects\";\n// eslint-disable-next-line no-unused-vars\nimport { ethers } from \"ethers\";\nimport { Context } from \"../../Context\";\n\nclass BidBlockchain extends Component {\n  async componentWillMount() {\n    await this.initConnection();\n    await this.deployContract();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      projectsCount: 0,\n      projects: [],\n      delanceSmContaract: \"\",\n    };\n    this.addJob = this.addJob.bind(this);\n  }\n\n  initConnection = () => {\n    // connenting with metamask!\n    var provider = window.ethereum;\n    // console.log('eht: ', window.ethereum);\n\n    let selectedAccount;\n    if (typeof provider !== \"undefined\") {\n      provider\n        .request({ method: \"eth_requestAccounts\" })\n        .then((accounts) => {\n          selectedAccount = accounts[0];\n          this.setState({ account: selectedAccount });\n          // setting account in local storage.\n\n          const { userState,setUserState } = useContext(Context);\n          \n          setUserState({\n            ...userState,\n            metaAccount: selectedAccount,\n          });\n\n          // localStorage.setItem(\"ownerAddress\", this.state.account);\n          console.log(`Selected account is: ${selectedAccount}`);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      window.ethereum.on(\"accountsChanged\", function (accounts) {\n        localStorage.removeItem(\"ownerAddress\");\n        selectedAccount = accounts[0];\n        // updating new account in local storage.\n        localStorage.setItem(\"ownerAddress\", this.state.account);\n        this.setState({ account: selectedAccount });\n        console.log(`Account changed to: ${selectedAccount}`);\n      });\n    }\n  };\n\n  deployContract = async () => {\n    var provider = window.ethereum;\n    const web3 = new Web3(provider);\n    const networkId = await web3.eth.net.getId();\n    console.log(`Network id is: ${networkId}`);\n\n    // actual fetching plus posting data on the blockchian!!!\n\n    if (DELANCE_CONTRACT_ADDRESS) {\n      const delanceContract = new web3.eth.Contract(\n        DELANCE_ABI,\n        DELANCE_CONTRACT_ADDRESS\n      );\n\n      // setContract(delanceContract);\n      this.setState({ delanceSmContaract: delanceContract });\n      const currentJobCount = await delanceContract.methods\n        .productCount()\n        .call();\n      console.log(`current job count: ${currentJobCount}`);\n\n      const _projectsCount = await delanceContract.methods\n        .productCount()\n        .call();\n      this.setState({ projectsCount: _projectsCount });\n\n      for (var i = 1; i <= _projectsCount; i++) {\n        let _project = await delanceContract.methods.products(i).call();\n        _project = Object.values(_project);\n        this.setState({\n          projects: [...this.state.projects, _project],\n        });\n      }\n      console.log(this.state.projects);\n    } else {\n      swal({\n        title: \"Smart contract not deployed\",\n        text: `Smart contract not deployed to the current detected network: ${networkId}!`,\n        icon: \"fail\",\n      });\n    }\n  };\n\n  addJob = (_projectTitle, _price) => {\n    console.log(\"Hello from addJob: \", this.state.account);\n\n    this.state.delanceSmContaract.methods\n      .createProduct(_projectTitle, _price)\n      .send({ from: this.state.account })\n      .once(\"receipt\", (receipt) => {\n        swal({\n          title: \"Congratulations!\",\n          text: `${_projectTitle} bid has been closed.`,\n          icon: \"success\",\n        });\n      });\n    console.log(`sender account: ${this.state.account}.. JOB ADDED!`);\n\n    // sweet alert!\n  };\n\n  completeJob = async (receiverAddr, senderAddr, _amount) => {\n    // console.log('Hello from addJob: ', this.state.account);\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const decimals = 18;\n    const input = _amount;\n    let amount;\n    if (_amount >= 1) {\n      amount = ethers.BigNumber.from(input).mul(\n        ethers.BigNumber.from(10).pow(decimals)\n      );\n    } else {\n      amount = ethers.utils.parseUnits(_amount.toString(), \"ether\");\n    }\n\n    const signer = provider.getSigner();\n    const tx = await signer.sendTransaction({\n      to: receiverAddr,\n      value: amount,\n    });\n\n    console.log(\"tx: \", tx);\n\n    // { ----------------------------------------------------------} Attempt-2\n    // let ethereum = window.ethereum;\n    // Request account access if needed\n    // await ethereum.enable();\n\n    // let provider = new ethers.providers.Web3Provider(ethereum);\n    // const amount = ethers.BigNumber.from(_amount).mul(\n    //   ethers.BigNumber.from(10).pow(decimals)\n    // );\n\n    // // Acccounts now exposed\n    // const params = [\n    //   {\n    //     from: senderAddr,\n    //     to: receiverAddr,\n    //     value: toString(_amount),\n    //   },\n    // ];\n\n    // const signer = provider.getSigner();\n    // const tx = signer.sendUncheckedTransaction(params);\n    // console.log(tx);\n\n    // const transactionHash = await provider.send('eth_sendTransaction', params)\n    // console.log('transactionHash is ' + transactionHash);\n\n    // console.log(`sender account: ${this.state.account}.. JOB ADDED!`);\n\n    // sweet alert!\n  };\n\n  render() {\n    return (\n      <div>\n        <MyProjects addJob={this.addJob} completeJob={this.completeJob} />\n      </div>\n    );\n  }\n}\n\nexport default BidBlockchain;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}